var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:\xa0 https://mdecd2025.github.io/hw-Ren911308 \n 學員作業倉儲:\xa0 https://github.com/mdecd2025/hw-Ren911308 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n \n', 'tags': '', 'url': 'About.html'}, {'title': '上課內容', 'text': 'w1 \n w4 \n w5 \n w6 \n w7 \n w8 \n w9 \n w10 \n w11 \n \n', 'tags': '', 'url': '上課內容.html'}, {'title': 'w1', 'text': '2a-ag5 \n 匯出組員倉儲及網站影片： \n \n 列出組員的倉儲與網頁 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n \n \n \n \n # 從\xa0 Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容 \n # 而所導入的 document 可以指向網頁中的特定 id 內容 \n from   browser  import   html, document \n # 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應 \n url  =   "https://mde.tw/list/2a.txt" \n # 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列 \n data  =   open (url).readlines() \n # 進行資料查驗時, 印出 data 數列內容 \n #print(data) \n # 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始 \n all_stud  =   data[ 1 :] \n # 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串 \n print ( "總共有 "   +   str ( len (all_stud))  +   "名學員" ) \n #  \n # 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應 \n brython_div1  =   document[ "brython_div1" ] \n # 利用 Brython 的 "<=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置 \n # 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference \n brython_div1 <= "1. " + html.A("2a-ag5", href="https://mdecd2025.github.io/2a-ag5/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag5") # 利用 html.BR() 插入 break 標註 brython_div1 <= html.BR() brython_div1 <= "2. " + html.A("41223126", href="https://mdecd2025.github.io/hw-Ren911308/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-Ren911308") brython_div1 <= html.BR() brython_div1 <= "3. " + html.A("41223150", href="https://mdecd2025.github.io/hw-41223150/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223150") \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w4', 'text': '\n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '請摘要出下列內容 : ( 放入英文文章內容 ) \n Summary of Webots User Guide R2025a \n Introduction to Webots Webots is a professional mobile robot simulation software designed for rapid prototyping. It allows users to create 3D virtual worlds with physics properties and add mobile robots equipped with sensors and actuators. Users can program these robots individually and even transfer control programs to real-world robots like e-puck, DARwIn-OP, and Nao. \n Capabilities of Webots Webots is widely used in research and education, supporting: \n \n Mobile robot prototyping (academia, industry, hobbyists) \n Robot locomotion research (legged, humanoid, quadruped robots) \n Multi-agent systems (swarm intelligence, collaborative robots) \n AI and adaptive behavior research (genetic algorithms, neural networks) \n Robotics education (C/C++/Java/Python/MATLAB programming) \n Robot competitions \n \n Required Knowledge Users should have basic knowledge of C, C++, Java, Python, or MATLAB to program robot controllers. For creating custom robot models or environments, knowledge of 3D computer graphics and VRML97 is helpful. \n User Support Cyberbotics offers paid support services, while community support is available via: \n \n Robotics StackExchange (technical questions) \n GitHub Discussions (Webots development) \n GitHub Issues (bug reports) \n Discord (quick discussions) \n \n Webots Simulation Components \n \n World (.wbt file) – Defines robots and their environment, stored in the "worlds" directory. \n Controller Program – Controls robots, written in C/C++/Java/Python/MATLAB, stored in the "controllers" directory. \n Optional Physics Plugin – Modifies physics behavior using C/C++. \n \n Key Concepts \n \n World \xa0– A hierarchical 3D structure describing objects, their properties, and relationships. \n Controller \xa0– A program that controls robots, executed as separate processes per robot. \n Supervisor Controller \xa0– A special controller with privileged operations like simulation control and video capture. \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '要啟動webots在可攜裡面輸入 webotsw 就可以開啟軟體，前提是要檔案內要 Webots_2025a_web.7z 才可以開啟，並放在data頁面，如果是舊版可攜套件 也可在.bat啟動編碼中自行設定加入 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n \n \n \n REM  for   Webots \n set   PYTHON_PATH = % Disk % :\\Python313 \n \xa0\xa0 \xa0 \n REM  for   webots \n set \xa0  path_webots = % Disk % :\\Webots_2025a\\msys64\\mingw64\\ bin ; % Disk % :\\Webots_2025a\\msys64\\usr\\ bin \n \xa0\xa0 \xa0 \n path = % Disk % :; % path_python % ; % path_git % ; % path_copsim % ; % path_msys2 % ; % path_miketex % ; % path_flutter % ; % path_node % ; % path_tcc % ; % path_postgresql % ; % path_range % ; % path_lua % ; % path_core % ; % path_putty % ; % path_vscode % ; % RUST_PATH % ; % path_erlang % ; % path_nodejs % ; % path_haskell % ; % path_scite % ; % path_xsltproc % ; % path_gnuplot % ; % path_openssl % ; % path_poppler % ; % path_webots % ; % path_blender % ; % path % ; \n \n \n \n \n \n \n \n 在開啟webots時系統會有跳出警告防火牆，其中一定要選擇允許，否則防火牆會擋 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '連假，內容一樣補上 \n 畫圖影片 \n \n 組合影片 \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '複習webots \xa0 SolidReference \xa0節點的用法說明，用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境\xa0<static environment>。通過這種方式，可以閉合機械迴圈。 \n 當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是某個共同上層 Solid 的下層。 \n 意思即是指 SolidReference 是一個引用類型，允許在 Joint 節點的 endPoint 欄位中指定某個目標。 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '本週統整先前所完成的內容，並拍成影片，自評期望成績並填寫表單。 \n 前往 41223126Midterm 可以看到自己的期中期望成績、心得 \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': 'Webots 2025a 有不少 bugs，其中包括操作過程閃退以及無法使用 Transform 節點，因此可以換為\xa0 Webots_2023b.7z \xa0版，像是我一開始就下載2025版本，所以使用同學2023版本開啟 solvespace的圖確實一職閃退，所以需要注意版本的差異，避免辛苦畫的圖因為閃退而需要重畫 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': 'webots小組協同模擬及 fourbar_box複習 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': 'tasks', 'text': '', 'tags': '', 'url': 'tasks.html'}, {'title': 'task1', 'text': '2a-ag5 \n 匯出組員倉儲及網站影片： \n \n 列出組員的倉儲與網頁 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n \n \n \n \n # 從\xa0 Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容 \n # 而所導入的 document 可以指向網頁中的特定 id 內容 \n from \xa0 browser \xa0 import \xa0 html, document \n # 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應 \n url \xa0 = \xa0 "https://mde.tw/list/2a.txt" \n # 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列 \n data \xa0 = \xa0 open (url).readlines() \n # 進行資料查驗時, 印出 data 數列內容 \n #print(data) \n # 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始 \n all_stud \xa0 = \xa0 data[ 1 :] \n # 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串 \n print ( "總共有 " \xa0 + \xa0 str ( len (all_stud)) \xa0 + \xa0 "名學員" ) \n # \n # 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應 \n brython_div1 \xa0 = \xa0 document[ "brython_div1" ] \n # 利用 Brython 的 "<=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置 \n # 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference \n brython_div1 <= "1. " + html.A("2a-ag5", href="https://mdecd2025.github.io/2a-ag5/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag5") # 利用 html.BR() 插入 break 標註 brython_div1 <= html.BR() brython_div1 <= "2. " + html.A("41223126", href="https://mdecd2025.github.io/hw-Ren911308/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-Ren911308") brython_div1 <= html.BR() brython_div1 <= "3. " + html.A("41223150", href="https://mdecd2025.github.io/hw-41223150/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223150") \n \n \n \n \n \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '操作過程影片： \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '使用 Solvespace 建立平面四連桿系統零組件 \n 零件: \n \n 組合: \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223126 \n 41223126-HW1 \n \n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41223126 \n 從 task3 ，繪製好的連桿以程式切割後導入webots組配模擬。(如果使用舊版本可攜程式需\xa0 pip install numpy \xa0 安裝 NumPy \xa0套件，否則程式將如法執行) \n 檔案: 41223126-HW2 \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41223126 \n HW3-41223126 \n 第一次 \n \n 第二次 \n \n 修改位置後完成品影片 \n \n 畫圖的部分沒什麼大問題，因為上學期已經稍微會用solvespaces，所以在繪製零件的部分是完全沒問題，在各個零件組立的部分也都沒有問題，組立的時候對好就沒問題，有比較複雜分割的部分是使用老師給的python程式，webot的部分就是需要特別注意各個銷孔洞的位置，要查看點座標再輸入進webot，要多嘗試，因為未必一次就能成功，我就試了兩次，最後在比較厲害的同學指導下，終於完成了，並修改完成，發現自己在座標方面真的出大包，導致自己做了兩次，需要更細心才行 \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: 上課內容 \n 各週網頁內容:第一週學習Python版本更新、列出各組的倉儲和網站、第四週ssh協定執行倉、第五週學習webots概念 \n 期中心得:上半學期我做的東西很少，但是盡可能把會做的都做了，下半學期我會努力補足之前的東西，這學期教的東西非常有難度，我會虛心地向比較厲害的同學請教，一定會努力跟上進度，雖然看起來沒甚麼進展，但是實際上已經正在慢慢追趕 \n 期中自評影片: \n \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41223126 \n EX1-41223126 \n \n 在綠色連桿上新增短桿並垂直，並設定桿與桿之間的角度，但要輸入弳度，所以利用Solvespace繪製好連桿後得知角度並轉為弳度 \n 模擬程式: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n \n \n \n from   controller  import   Robot \n \xa0 \n def   run_robot(): \n \xa0\xa0\xa0\xa0 # Create the Robot instance \n \xa0\xa0\xa0\xa0 robot  =   Robot() \n \xa0 \n \xa0\xa0\xa0\xa0 # Get simulation time step \n \xa0\xa0\xa0\xa0 timestep  =   int (robot.getBasicTimeStep()) \n \xa0 \n \xa0\xa0\xa0\xa0 # Get motor device \n \xa0\xa0\xa0\xa0 motor  =   robot.getDevice( \'motor\' ) \n \xa0 \n \xa0\xa0\xa0\xa0 # Set motor for continuous rotation \n \xa0\xa0\xa0\xa0 motor.setPosition( float ( \'inf\' )) \n \xa0\xa0\xa0\xa0 motor.setVelocity( 1.0 ) \n \xa0 \n \xa0\xa0\xa0\xa0 # Main control loop \n \xa0\xa0\xa0\xa0 while   robot.step(timestep) ! =   - 1 : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pass \n \xa0 \n if   __name__  = =   "__main__" : \n \xa0\xa0\xa0\xa0 run_robot() \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223126 \n \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 41223126 \n 41223126-EX3.zip \n 3-1 \n \n 3-2 \n \n 3-3 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n 投球數量限制: \n \n from controller import Supervisor, Keyboard\nimport time\nimport random\nimport numpy as np\nimport re\n\n# ----------------- 參數區 -----------------\nHOOP_CENTER = [0.622, -0.103, 0.742838]\nBALL_DEF_PATTERN = re.compile(r"Sphere_\\d+")\nsupervisor = Supervisor()\ntimestep = int(supervisor.getBasicTimeStep())\nkeyboard = Keyboard()\nkeyboard.enable(timestep)\n\nsphere_radius = 0.1\nTRAJECTORY_POINT_RADIUS = 0.03\nTRAJECTORY_POINT_STEP = 0.12\nTRAJECTORY_MAX_POINTS = 5\n\nwaiting_ball_def = None\nwaiting_ball_info = None\nlast_key_time = 0\ndebounce_time = 0.5\ndefault_feed_pos = (-0.35, 0.0, 0.9)\nPRINT_INTERVAL = 0.2\n\ncurrent_tracked_def = None\nlast_print_time = time.time()\n\ntrajectory_points = []\n\n# 新增球數上限與計數\nmax_balls = 8\nballs_created = 0\n\ndef axis_angle_to_rotation_matrix(axis, angle):\n    x, y, z = axis\n    c = np.cos(angle)\n    s = np.sin(angle)\n    C = 1 - c\n    return np.array([\n        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],\n        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],\n        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]\n    ])\n\ndef generate_valid_def_name(base_name="Sphere"):\n    timestamp = int(supervisor.getTime() * 1000)\n    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"\n\ndef generate_random_color():\n    return random.random(), random.random(), random.random()\n\ndef youbot_local_to_world(local_pos):\n    youbot_node = supervisor.getFromDef(\'youbot\')\n    if youbot_node is None:\n        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")\n    youbot_translation = np.array(youbot_node.getField(\'translation\').getSFVec3f())\n    youbot_rotation = youbot_node.getField(\'rotation\').getSFRotation()\n    youbot_axis = youbot_rotation[:3]\n    youbot_angle = youbot_rotation[3]\n    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)\n    rotated = youbot_rot_mat @ np.array(local_pos)\n    world_pos = youbot_translation + rotated\n    return tuple(world_pos)\n\ndef create_static_ball(def_name, world_pos, r, g, b):\n    sphere_string = f"""\n    DEF {def_name} Solid {{\n      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}\n      contactMaterial "ball"\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {sphere_radius}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor {r} {g} {b}\n            }}\n          }}\n        }}\n      ]\n      boundingObject Sphere {{\n        radius {sphere_radius}\n      }}\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n\ndef create_dynamic_ball(def_name, world_pos, r, g, b):\n    sphere_string = f"""\n    DEF {def_name} Solid {{\n      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}\n      contactMaterial "ball"\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {sphere_radius}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor {r} {g} {b}\n            }}\n          }}\n        }}\n      ]\n      boundingObject Sphere {{\n        radius {sphere_radius}\n      }}\n      physics Physics {{\n        mass 0.01\n        density -1\n      }}\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n\ndef create_trajectory_point(pos):\n    def_name = generate_valid_def_name("TrajectoryPt")\n    sphere_string = f"""\n    DEF {def_name} Transform {{\n      translation {pos[0]} {pos[1]} {pos[2]}\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {TRAJECTORY_POINT_RADIUS}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor 1 0.7 0\n              transparency 0.3\n            }}\n          }}\n        }}\n      ]\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n    return def_name\n\ndef delete_trajectory_points():\n    global trajectory_points\n    for _, def_name in trajectory_points:\n        node = supervisor.getFromDef(def_name)\n        if node:\n            node.remove()\n    trajectory_points.clear()\n\ndef create_static_sphere(supervisor, x, y, z):\n    global waiting_ball_def, waiting_ball_info\n    def_name = generate_valid_def_name()\n    waiting_ball_def = def_name\n    r, g, b = generate_random_color()\n    world_pos = youbot_local_to_world((x, y, z))\n    waiting_ball_info = (world_pos, r, g, b)\n    create_static_ball(def_name, world_pos, r, g, b)\n\ndef activate_dynamic_ball():\n    global waiting_ball_def, waiting_ball_info\n    if waiting_ball_def is None or waiting_ball_info is None:\n        return\n    ball_node = supervisor.getFromDef(waiting_ball_def)\n    if ball_node is not None:\n        ball_node.remove()\n        supervisor.step(int(supervisor.getBasicTimeStep()))\n    world_pos, r, g, b = waiting_ball_info\n    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)\n    waiting_ball_def = None\n    waiting_ball_info = None\n\ndef is_ball_landed(pos, threshold_z=0.13):\n    return pos[2] < threshold_z\n\nprint("按 F 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")\n\nwhile supervisor.step(timestep) != -1:\n    key = keyboard.getKey()\n    current_time = time.time()\n\n    if key == ord(\'F\') and (current_time - last_key_time >= debounce_time):\n        if balls_created >= max_balls:\n            print("遊戲結束，已生成10顆球，不可再產生新球。")\n        elif waiting_ball_def is None:\n            create_static_sphere(supervisor, *default_feed_pos)\n            current_tracked_def = waiting_ball_def\n            delete_trajectory_points()\n            balls_created += 1\n        else:\n            print("還有一顆球等待擊出，請先擊出再產生新球。")\n        last_key_time = current_time\n\n    if key == ord(\'M\') and (current_time - last_key_time >= debounce_time):\n        activate_dynamic_ball()\n        last_key_time = current_time\n\n    if current_tracked_def is not None:\n        ball_node = supervisor.getFromDef(current_tracked_def)\n        if ball_node is not None:\n            pos = ball_node.getPosition()\n            if current_time - last_print_time >= PRINT_INTERVAL:\n                #print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")\n                last_print_time = current_time\n            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) > TRAJECTORY_POINT_STEP:\n                def_name = create_trajectory_point(pos)\n                trajectory_points.append((pos, def_name))\n                if len(trajectory_points) > TRAJECTORY_MAX_POINTS:\n                    _, old_def = trajectory_points.pop(0)\n                    node = supervisor.getFromDef(old_def)\n                    if node:\n                        node.remove()\n            if is_ball_landed(pos):\n                delete_trajectory_points()\n        else:\n            delete_trajectory_points()\n            current_tracked_def = None\n \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};